.. -*- coding: utf-8 -*-

第5章 演習課題
==============

課題1
-----

サンプルプログラムをコンパイル・実行して動作を確認せよ．さらに，適宜修正してその実行結果を確認せよ．

課題2
-----

与えられた月日(例えば4月1日であれば4と1)を標準入力から読み込み，その日が1年のうちで何日目かを表示するプログラムを作成せよ．ただし閏年は無視して考えて良い．以下のような配列を用いるとよいだろう．

.. code-block:: fortran

      integer, parameter :: days(12) = &
           & (/31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31/)

実行結果は例えば以下のようなものである．

.. code-block:: sh

    $ ./a.out
     Input month and day :
    4    # キーボード入力
    1    # キーボード入力
     day of year :           91


.. _score_format:

課題3
-----

学生のテストの点数を自動的に処理するプログラムを作成せよ．すなわち，標準入力から学生の人数および人数分のテストの点を順に読み込み，最高点，最低点，平均点，標準偏差をそれぞれ表示するプログラムを作成せよ．ただし標準偏差はデータ数 :math:`N` ，各データの値 :math:`x_i (i=1,\ldots,N)` ，平均値 :math:`\bar{x}` を用いて

.. math::


    \sigma = \sqrt{\frac{1}{N} \sum_{i=1}^{N} (x_i - \bar{x})^2}

と定義される．

データファイル `score1.dat <data/score1.dat>`_ を手元にコピーして，以下のようにリダイレクトによって作成したプログラムに読み込ませ，結果を確認せよ．

.. code-block:: sh

    $ ./a.out < score1.dat
     Best               :           98
     Worst              :            6
     Average            :    46.399999999999999
     Standard deviation :    25.115201240152015

なおデータファイルには，1行目にデータ数 :math:`N` ，それ以降に各データ :math:`x_i` が記述されているので，まずはデータ数を読み込み配列のメモリを ``allocate`` した後に各データを読み込めば良い．


課題4
-----

標準入力から2つのベクトルを読み込み，両者の内積を計算し表示するプログラムを作成せよ． ``do`` ループを用いて地道に計算した結果と組込み関数 ``dot_product`` を用いた結果を比較すること．

以下はデータファイル `vector.dat <data/vector.dat>`_ を入力とした場合の結果である．

.. code-block:: sh

    $ ./a.out < vector.dat
     Inner product with do loop     :    5.4454054113084460E-017
     Inner product with dot_product :    9.8770817913429454E-017

ただしデータは，ベクトルの長さ :math:`N` ，1つ目のベクトルの要素( :math:`N` 個)，2つ目のベクトルの各要素( :math:`N` 個)，の順に並んでいるものとする．


課題5
-----

標準入力からベクトルと行列を読み込み，積を計算して表示するプログラムを作成せよ．これについても2重\ ``do`` ループを用いて地道に計算した結果と，組込み関数 ``matmul`` を用いた結果を比較すること．

以下はデータファイル `matvec.dat <data/matvec.dat>`_ を入力とした場合の結果である．

.. code-block:: sh

    $ /a.out < matvec.dat
     Matrix-vector product with do loop
       1.0000000000000000
      -1.0000000000000000
     -0.50000000000000000
      0.50000000000000000
      -1.5000000000000000
       1.5000000000000000
       1.0000000000000000
      -1.0000000000000000
     Matrix-vector product with matmul
       1.0000000000000000
      -1.0000000000000000
     -0.50000000000000000
      0.50000000000000000
      -1.5000000000000000
       1.5000000000000000
       1.0000000000000000
      -1.0000000000000000

データは，ベクトルの長さ :math:`N` ，ベクトルの要素( :math:`N` 個)，行列の各要素( :math:`N^2` 個)，が順に並んでいるものとする．また行列の要素は :math:`a_{11}, a_{21}, a_{31} \ldots` の順に読み込まれることと，ベクトルと行列の積 :math:`b_{i} = \sum_{j} a_{i,j} x_{j}` の添字の順番に注意せよ．


課題6
-----

標準入力から与えられた整数 :math:`n ( \ge 2)` 以下の全ての素数( :math:`1` は素数に含めない)を表示するプログラムを作成せよ．以下のエラトステネスのふるいと呼ばれるアルゴリズムを用いるとよい．

各整数 :math:`i=2,\ldots,n` について順に

    -  :math:`i` が素数でなければ無視( :math:`i+1` の処理へ)
    -  :math:`i` が素数であれば :math:`i` から :math:`n` の整数のうち :math:`i` の倍数のものを消去(素数以外と判定)

の処理を行う．なお各整数が素数かどうかを判定するには長さ :math:`n` の論理型配列を用いれば良い．この配列を全て ``.true.`` に初期化し，素数でないと判定されたものは ``.false.`` を代入して消去する．

課題7
-----

標準入力から3つの整数 :math:`L, M, N` を読み込み， ``integer`` の :math:`L \times M \times N` の3次元配列のメモリを確保せよ．その配列に対して，組み込み関数 ``size``, ``shape``, ``lbound``, ``ubound`` を呼び出すことでその動作を確認せよ．( :math:`L, M, N` の値はそれぞれせいぜい100程度かそれ以下にしておいた方が良い．)
