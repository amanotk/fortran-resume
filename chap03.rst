.. -*- coding: utf-8 -*-

.. highlight:: fortran
  :linenothreshold: 1

============================
変数・データ型・基本的な計算
============================

ここでは計算機でデータを扱うには必須となる変数とデータ型および基本的な計算の仕方について学ぼう.

    サンプルプログラム

    - `sample1.f90 <sample/chap03/sample1.f90>`_ : 変数の基本
    - `sample2.f90 <sample/chap03/sample2.f90>`_ : データ型と精度および定数
    - `sample3.f90 <sample/chap03/sample3.f90>`_ : ``read`` の使い方
    - `sample4.f90 <sample/chap03/sample4.f90>`_ : 基本的な算術演算および代入
    - `sample5.f90 <sample/chap03/sample5.f90>`_ : 組込み関数
    - `sample6.f90 <sample/chap03/sample6.f90>`_ : 型変換

.. contents:: この章の内容
    :depth: 2

変数
----

プログラム中で何らかの値を保持するためには変数を用いる必要がある. 例えば一度には出来ないような複雑な計算の途中結果などは変数に格納することになる. 要するにデータの入れ物である. 変数を用いるにあたって,

-  変数は宣言しなければならないこと
-  変数には型があること

という2点に注意しなければならない. 変数の宣言は

::

      データ型 :: 変数名

のような形で行う. (ここで" ``::`` "は必須ではないが, 宣言と同時に初期化をしたり, 後で出てくる変数の属性を指定する時には必要となる. 従ってこの演習では変数宣言時には常に" ``::`` "を用いることにする.)

例えば以下のコードは ``n`` と ``x`` という2つの変数を宣言し, ``n`` には ``10`` を ``x`` には ``0.1`` を代入している. ``=`` は数学で用いる記号とは異なり, ``=`` の左側の変数に右側の値を代入する(データを格納する)という意味である.

::

      integer :: n ! 整数型の変数の宣言
      real :: x    ! 実数型の変数の宣言

      n = 10  ! 代入
      x = 0.1 ! 代入

上の例では ``n`` は整数( ``integer`` )を, ``x`` は実数( ``real`` )を表す変数であるが, これはそれぞれ1行目や2行目のように変数を宣言をした時点で確定する. 面倒なように思われるかもしれないが, *変数は使う前に用途に合わせて* 宣言しなければならない. これはすぐ後に述べるように計算機が表現できる値に限界があり, また人間のように臨機応変に状況に対処できないからである.

なおFortranには暗黙の型宣言という悪しき慣習があり, 宣言されていない変数でも変数の名前に応じて自動的に型を仮定して宣言されたものとみなす. 詳細は省くがこれは明らかにバグの元であり, この機能は使わないことを強く推奨する. ``program`` 文の直後に

::

      implicit none

と書くことでこの暗黙の型宣言を禁止することができ, 全ての変数を明示的に宣言しなければコンパイルエラーとなる. 以降, 本演習では必ず ``implicit none`` を使うこととする [#]_. なおgfortranでは ``-fimplicit-none`` というオプションを用いると, デフォルトで ``implicit none`` を指定した状態にすることが出来る.


データ型と精度
--------------

標準のFortranで用いることができるデータ型として以下のようなものがある.

.. tabularcolumns:: |p{0.1 \textwidth}|p{0.1 \textwidth}|p{0.6 \textwidth}|
.. list-table:: 使用可能なデータ型
    :widths: 10, 10, 60
    :header-rows: 1

    * - 型名
      - キーワード
      - 用途

    * - 整数型
      - ``integer``
      - 整数(厳密な表現)

    * - 実数型
      - ``real``
      - 実数(近似的な表現)

    * - 複素数型
      - ``complex``
      - 複素数(実部と虚部を表す2つの実数型の組み合わせ)

    * - 文字型
      - ``character``
      - 文字を表す

    * - 論理型
      - ``logical``
      - 真偽値( ``.true.`` または ``.false.``)


注意しなければならないのは, 特に実数型の ``real`` (従って当然 ``complex`` も)はあくまで実数の近似表現であるという点である. 例えば ``1.0`` を代入したとしても, これが厳密に1を表しているわけではない. これは10進数を2進数で無理やり表そうとするために起きる問題であり, 回避する手段は無い. そうは言っても多くの場合において十分な精度で実数を近似できているので問題が無いのである. これとは対照に, 整数型 ``integer`` は厳密に整数を表現することが出来る.

しかしながら整数型にしても実数型にしても, どんな値でも表現できるというわけではない. 具体的には各データ型に何バイト [#]_ の領域を持たせるかによって表現できる値の範囲が変わる. Fortranでは確保する領域の大きさを変数の宣言時に明示的に指定することが出来る. すなわち

::

      integer(kind=4)    :: n  ! 4バイトの整数
      real(kind=8)       :: x  ! 8バイトの実数
      complex(kind=8)    :: z  ! 16バイトの複素数(8バイトの実数 x 2)

のように型名の後に ``()`` でデータ領域の大きさを指定できる. これを ``kind`` パラメータと呼ぶ. なお, ``real(8)`` のように ``kind=`` は省略して構わない. ( ``kind`` パラメータを用いると移植性の高いプログラムを作成することが出来るが, これは本演習の守備範囲を超えるので以降では ``kind=`` は省略することとする.) ちなみに特に何も指定しない場合は ``integer`` が4バイト, ``real`` が4バイトとなっていることが多いが, これは処理系依存である. 処理系依存などの細かいことはとりあえず忘れると, 結果的に表すことのできる値の範囲は以下のようになっていると思えばよい. (実数の値の範囲については :ref:`c8_float_precision` でもう少し細かく説明する.)

.. tabularcolumns:: |p{0.2 \textwidth}|p{0.1 \textwidth}|p{0.1 \textwidth}|p{0.5 \textwidth}|
.. list-table:: 各データ型の表現できる値の範囲
    :widths: 20, 10, 10, 50
    :header-rows: 1

    * - 型名
      - 最小値
      - 最大値
      - 備考

    * - ``integer(2)``
      - :math:`-2^{15}`
      - :math:`2^{15}-1`
      -

    * - ``integer(4)``
      - :math:`-2^{31}`
      - :math:`2^{31}-1`
      -

    * - ``integer(8)``
      - :math:`-2^{63}`
      - :math:`2^{63}-1`
      -

    * - ``real(4)``
      - :math:`\sim 10^{-38}`
      - :math:`\sim 10^{+38}`
      - 値は絶対値, 精度は約7桁

    * - ``real(8)``
      - :math:`\sim 10^{-308}`
      - :math:`\sim 10^{+308}`
      - 値は絶対値, 精度は約16桁

なお ``real(4)`` を単精度, ``real(8)`` を倍精度, ``real(16)`` を4倍精度と呼ぶのが通例である. 特に実数型については, 単精度の約7桁という精度では心もとないので現在では倍精度を用いるのが一般的である. 本演習では特段の理由がない限り ``real(8)``, ``complex(8)`` を用いる( ``complex(8)`` では実部と虚部がそれぞれ ``real(8)`` となる).

なお複素数型 ``complex`` の定数は ``(実部, 虚部)`` という形で表す. 例えば

::

      complex(8) :: x = (1.0_8, 1.0_8)

は倍精度複素数型の変数 ``x`` の値を :math:`1 + i` に初期化している.

また文字型( ``character``)では通常 ``kind=1`` なので [#]_, ``kind`` パラメータを指定する必要がない. ``character`` で複数の文字(文字列)を表すには

::

      character(len=256)  :: char   ! 256文字分

以下のように ``len=`` で文字数を指定することになる. (この場合は``len=`` を省略することも出来る.)

論理型( ``logical``)は真偽値を表すために用いるので, 通常は ``kind`` パラメータは指定する必要は無い.

定数
----

数値などを直接ソースコードに記述するとそれは定数(定数リテラル)と呼ばれる. 例えば ``99`` や ``1.5`` などのような表現である. 定数に ``_4`` や ``_8`` などを付けることによって ``kind`` パラメータを指定することも出来る. 先ほどの例では ``99_4``, ``1.5_8`` などのように書くことが出来る. 論理型の定数は ``.true.`` もしくは ``.false.`` のどちらかである. 文字型の定数は既に最初のサンプルで見たように ``'`` (シングルクォート)もしくは ``"`` (ダブルクォート)で囲まれた文字列, 例えば ``'earth'`` や ``"physics"`` などである.

また ``parameter`` 属性を用いて定数の変数を使用することも可能である. これを名前付き定数と呼ぶ.


::

      integer(4), parameter :: n  = 100_4
      real(8), parameter    :: pi = 3.141592653589_8
      integer(4) :: m
      real(8)    :: f, g

      m = 2048_4    ! 4バイトの整数2048を代入
      f = 3.1415_8  ! 8バイトの実数3.1415を代入
      g = 3.0e+10_8 ! 3 x 10^10

上記の例では ``n`` を4バイトの整数, ``pi`` は8バイトの実数として, それぞれ値を指定している. これらの変数は ``parameter`` が指定されているため定数として扱われ, プログラム中で誤って ``pi = 1.0_8`` などとして値を変更しようとするとコンパイルエラーとなる. プログラム中で絶対に変更されない値を扱う場合にはこのように名前付き定数として宣言しておくと値が変更される心配が無いので安心である. (信じられないかもしれないが, プログラムの規模が大きくなってくると, このようなミスによるバグに悩まされることがしばしば起こる.)

また実数で例えば :math:`3 \times 10^{10}` を表現するには上の例の8行目のように ``3.0e+10_8`` のように書けば良い. ちなみにFortran 77の慣習では倍精度での定数値を表現するのに ``e`` の代わりに ``d`` を使っていたので, これを ``3.0d+10`` と書くと倍精度, すなわち ``3.0e+10_8`` と同じ意味となる. このように実数の定数に ``e`` や ``d`` を用いる表現は今でもかなり頻繁に見られるので知っておくと良い.

標準入力から変数への値の代入
----------------------------

以下のように変数 ``x`` を宣言しておいて ``read(*,*)`` を用いると, プログラムの実行時にキーボードからの入力された内容を読み込み, 変数(この場合は ``x``)に代入することが出来る.

::

      integer :: x

      read(*,*) x
      write(*,*) 'You typed : ', x

この例では入力された値が ``3`` なら "You typed : 3" などと表示される. ``read(*,*)`` の意味は後述するのでここでは再びオマジナイであると思っておこう.

算術演算
--------

Fortranでは最も基本的な演算である四則演算およびべき乗を以下のように計算することが出来る. 当然変数同士での演算も可能である.

::

      write(*,*) 12 + 4  ! 和 => 16
      write(*,*) 12 - 4  ! 差 => 8
      write(*,*) 12 * 4  ! 積 => 48
      write(*,*) 12 / 4  ! 商 => 3
      write(*,*) 2**3    ! べき乗 => 8

演算実行の優先順位は *べき乗 > 乗算 = 除算 > 加算, 減算* の順となっているが, 可読性のために, 分かりづらい場合には括弧 ``()`` で明示的に演算の順番が分かるようにしておくと良い.

代入
----

既に学んだように ``=`` 演算子を用いて左辺で指定する変数に値を代入することが出来る. この時, 右辺には任意の演算を含んでも良い. 例えば

::

      real(8) :: x, y, z

      read(*,*) x, y
      z = 0.5_8 * (x + y)

は ``x`` と ``y`` を標準入力から読み込み, その平均値を ``z`` に代入する. なお, ``read(*,*)`` の場合も, ``write(*,*)`` と同様に複数の変数を並べて指定することができる.

組込み関数
----------

Fortranには標準で使える関数が多く用意されており, 組込み関数と呼ばれる. 関数というと数学の関数を思い浮かべるかもしれないが, 必ずしも数学関数ばかりではない. 関数というのは単に入力値を受け取り何らかの値を返す機能(function)のことである. 例えば数学では :math:`f(x) = \sin(x)` と書いた時には :math:`x` という入力に対して :math:`\sin(x)` という値を返すことを意味する. Fortranでも以下のように入力値 ``x`` 対して ``sin(x)`` とすることで関数値を計算することが出来る. なお関数に渡すパラメータ(ここでは ``x``)のことを *引数* と呼び, 関数が返す値のことを *返値* と呼ぶ.

::

      real(8) :: x, y

      read(*,*) x ! キーボードから実数を読み込む
      y = sin(x)

この他にも ``cos(x)``, ``tan(x)``, ``sqrt(x)``, ``exp(x)``, ``log(x)`` など様々な関数が用意されているので, 必要に応じて調べて欲しい [#]_. なお, 自分で独自の関数を定義して用いる方法は後に学ぶことになる.

型変換
------

異なる型同士の演算を行う場合や, 代入する際に左辺と右辺で型が異なる場合には *より一般的な型へと変換された後に演算や代入が実行される*. この機能は便利なようで時に注意が必要な場合がある.

例えば以下の例を考えよう.

::

      real(8)    :: x

      x = 2 / 3

``x = 0.666...`` となるかと思いきや, 実際には ``x = 0`` となってしまう. これは左辺が整数同士の演算として行われるため( ``2 / 3`` は ``0``)である. これを回避するには例えば ``x = 2.0_8 / 3`` や ``x = 2 / 3.0_8`` とすれば良い. どちらかが実数であればもう一方も実数に変換されてから計算されるので, 演算結果も実数となる. ただし ``x = 2.0 / 3`` のようにしてしまうと ``x`` は倍精度( ``real(8)``)で宣言されているにも関わらず ``2.0`` は単精度の実数( ``real(4)``)と解釈され, 右辺の計算結果も単精度実数となる. これが左辺の ``x`` に代入される時に倍精度( ``real(8)``)に変換されるため, 結果的には精度が失われることになってしまう.

以下の組込み関数を用いて明示的に型変換を行うことも出来る. 例えば, ``real(1, kind=8)`` によって整数 ``1`` が倍精度実数の ``1.0_8`` に変換される. ここでも2番目の引数を指定し忘れると精度が失われるので注意が必要である. ただし ``kind=`` は省略可能であり, ``real(1, 8)`` とするだけでも良い.

.. tabularcolumns:: |p{0.3 \textwidth}|p{0.6 \textwidth}|
.. list-table:: 型変換を行う組み込み関数
    :widths: 30, 60
    :header-rows: 1

    * - 関数名
      - 説明

    * - ``int(x)``
      - ``integer`` へ変換(切捨て)

    * - ``int(x, kind=k)``
      - ``integer(k)`` へ変換(切捨て)

    * - ``real(x)``
      - ``real`` へ変換

    * - ``real(x, kind=k)``
      - ``real(k)`` へ変換

    * - ``cmplx(x)``
      - ``complex`` へ変換(実部が ``x``, 虚部は ``0``)

    * - ``cmplx(x, y)``
      - ``complex`` へ変換(実部が ``x``, 虚部は ``y``)

    * - ``cmplx(x, y, kind=k)``
      - ``complex(k)`` へ変換(実部が ``x``, 虚部は ``y``)

----

.. [#]

   巷で流行りのスクリプト言語では変数宣言は要らないじゃないかという人もいるかもしれないが, それは動的型付き言語だからそれでも良いのである. CやFortranのような静的型付き言語ではその限りではない.

.. [#]

   通常1バイトは8ビット, すなわち1バイトあたり2 :sup:`8` = 256通りの表現が可能である.

.. [#]

   ASCIIコードは1バイトで足りるため.

.. [#]

   例えば 高木(2009, 3章).
